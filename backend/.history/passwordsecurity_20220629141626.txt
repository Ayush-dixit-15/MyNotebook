The password in our database should not be stored in as a plain text because if we do so, and any attacker somehow gets the access of our database, our account will get hacked.So, developers came up with a solution for this sort of a problem known as HASHING. So,what happens in hasing is whenever you create a password , the backend runs a hash function(this hash function is a one-way function that creates a hash of a particular password and hash is a string of any number of characters. Now, every password is given its unique hash. For example of the password is Ayush and lets say its hash is 133@hw. So, if anyone sets the password Ayus, the hash would be completely different, it could be 43r434). Now, since we have hashed our password, the hash of the password is stored in our database and what an attacker gets is hash of that particular function which is not reversible by any means. If the hacker tries to login usinng the hash as password, the hash of that hash would be generated giving something else and since, it won't be stored in our database, the access would be denied. Now, whenever the user who is the real owner of that account, logins woth the original password whose hash is generated by the backend and is compared to the hash stored in the databse and when match found, access is granted.




But, in modern word hackers tend to have a rainbow table. That contains many hashes generated by the most common hashing algorithms and the passwords corresponding to them. So, whenever a hacker gets into a database and gets a hash, it immediately runs a search through his hash table and finds the corresponding password.Note that the salt is also stored in the database

So, in order to prevent it, the database administrators use the concept of adding the "salt" in the password that is a random string corresponding to evry password, the salt is unique and is added by the backend in it . So, hash corresponding to password+salt is generated and is furthur matched and access is provided accordingly. So, if any hacker even gets the hash, it wont be able to generate the corresponding password. 
BCRYPTJS is a node module which we have used in this project for the password security.



Pepper is also one thing which is added in the backend to increase security but, it is not saved in the database